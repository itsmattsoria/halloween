---
import BaseLayout from '../layouts/BaseLayout.astro';
import MovieCard from '../components/MovieCard.astro';
import { getEntries } from '../components/EntriesFetch.astro';

let query = `{
    entries(site: "halloween", section: "movies", watchlist: false) {
      id
      title
      slug
      ... on movie_Entry {
        year
        rating
        externalLink
        notes
        yearsWatched(status: ["disabled", "live"]) {
          title
          status
          slug
        }
        movieImage {
          ... on halloween_Asset {
            id
            alt
            focalPoint
            url
            title
            width
            height
          }
        }
      }
    }
  }`;
const movies = await getEntries(query);

movies.sort((a, b) => (a.title > b.title) ? 1 : -1);
const options = [ 'title', 'year', 'rating' ];
---

<BaseLayout title="Matt Soria's Halloween: Movie Index ðŸŽƒ">
	<main class="container pb-3xl">
    <header class="mb-3xl">
      <div>
        <a href="/" class="text-lg text-highlight relative z-10 block w-max">Back</a>
        <h1 class="type-full inline-flex flex-col sm:flex-row gap-x-[0.2em] -translate-x-[0.05em] leading-none">
          <span class="uppercase text-highlight block sm:inline-block" transition:name="siteTitle">Halloween</span>
          <span class="font-display text-primary block sm:inline-block" transition:name="Movie Index">Movie Index</span>
        </h1>
      </div>
    </header>

		{ movies && (
      <section class="mb-2xl">
        <h2 class="font-display leading-none uppercase text-highlight text-4xl mb-m">All Movies Watched <span class="align-top inline-block font-sans text-sm mt-[0.4em]">({movies.length})</span></h2>
        <astro-sort-list id="sort-list" data-value-names={options} class="@container">
          <div class="sticky top-0 z-30 bg-secondary flex items-start flex-col sm:flex-row sm:justify-between sm:items-end gap-4 py-2 mb-4">
            <div class="flex gap-4">
              <div class="text-base">Sort by:</div>
              { options && options.map((option, index) => (
                index === 0 ? <button class="sort text-base asc underline-offset-4" data-sort={option}>{option}</button> : <button class="sort text-base underline-offset-4 hover:text-highlight hover:underline focus-visible:text-highlight focus-visible:underline" data-sort={option} data-default-order="desc">{option}</button>
              ))}
            </div>
            <button id="view-toggle" data-view="grid" class="text-base underline underline-offset-4 hover:text-highlight focus-visible:text-highlight">List View</button>
          </div>
          <ul class="list grid gap-s lg:gap-m md:grid-cols-2 lg:grid-cols-3">
            { movies.map((movie) => 
              <MovieCard movie={movie} />
            )}
          </ul>
        </astro-sort-list>

        { movies.map(movie => (
          <div id={ movie.slug } class="popover" popover>
            <button popovertarget={ movie.slug } popovertargetaction="hide">
              close
            </button>
            <div>
              <h2 class="text-lg pr-3xl text-balance">Matt's notes on { movie.title }:</h2>
              <div class="popover-content text-sm pt-s" set:html={ movie.notes }></div>
            </div>
          </div>
        ))}
      </section>
    ) }
	</main>
</BaseLayout>
<script>
  import List from 'list.js';

  class AstroSortList extends HTMLElement {
    constructor() {
      super();
      this.viewToggle = this.querySelector('#view-toggle');
      this.movieList = this.querySelector('.list');
      this.movieCards = this.querySelectorAll('.movie-card');
      this.listOptions = {
        valueNames: this.dataset.valueNames.split(',')
      }

      this.init();
    }

    init() {
      this.sortList = new List(this, this.listOptions);

      this.viewToggle.addEventListener('click', () => {
        this.changeView();
      });
    }

    changeView() {
      if (this.viewToggle.dataset.view === 'grid') {
        this.viewToggle.dataset.view = 'list';
        this.viewToggle.textContent = 'Grid View';
        this.movieList.classList.add('list-view');
        this.movieCards.forEach((card) => {
          card.classList.add('list-view');
          card.querySelector('.poster')?.classList.add('list-view');
        });
      } else {
        this.viewToggle.dataset.view = 'grid';
        this.viewToggle.textContent = 'List View';
        this.movieList.classList.remove('list-view');
        this.movieCards.forEach((card) => {
          card.classList.remove('list-view');
          card.querySelector('.poster')?.classList.remove('list-view');
        });
      }
    }
  }

  customElements.define('astro-sort-list', AstroSortList);
</script>
<style>
  h1 {
    --scaler:15.7cqw;
    @screen sm {
      --scaler:9.8cqw;
    }
  }

  .sort {
    &.asc, &.desc {
      color: theme('colors.highlight');
      text-decoration: underline;
    }
    &.asc:after {
      content: ' â–²';
      font-size: 0.65em;
    }
    &.desc:after {
      content: ' â–¼';
      font-size: 0.65em;
    }
  }

  .list-view {
    gap: 1px;
    overflow: hidden;
    border-radius: theme('borderRadius.DEFAULT');
    grid-template-columns: 1fr;

    @screen md {
      grid-template-columns: 1fr 1fr;
    }
  }
</style>
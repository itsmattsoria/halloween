---
export const prerender = false;
import BaseLayout from '../layouts/BaseLayout.astro';
import MovieCard from '../components/MovieCard.astro';

import { getEntry } from '../components/EntryFetch.astro';
import { getEntries } from '../components/EntriesFetch.astro';

let homeEntryQuery = `{
	entry(site: "halloween", section: "halloweenHome") {
		id
		... on halloweenHome_Entry {
			richText
			musicEmbeds {
				... on musicEmbeds_Entry {
					id
					plainText
				}
			}
		}
	}
}`;
const entry = await getEntry(homeEntryQuery);

let yearsQuery = `{
	entries(site: "halloween", section: "halloweenYears") {
		title
		slug
	}
}`;
const years = await getEntries(yearsQuery);

let moviesQuery = `{
  entries(site: "halloween", section: "movies", rating: "5", orderBy: "RAND()") {
    ... on movie_Entry {
      id
      rating
      year
      title
      externalLink
      richText
      yearsWatched(status: ["disabled", "live"]) {
        title
        status
        slug
      }
      movieImage {
        ... on halloween_Asset {
          id
          alt
          focalPoint
          url
          title
          width
          height
        }
      }
    }
  }
}`;
const topTenMovies = await getEntries(moviesQuery);

function shuffle(array) {
	for (let i = array.length - 1; i > 0; i--) {
			const j = Math.floor(Math.random() * (i + 1));
			[array[i], array[j]] = [array[j], array[i]]; // ES6 destructuring assignment for swapping
	}
	return array;
}

const randomTopTen = shuffle(topTenMovies).slice(0, 10);
---

<BaseLayout title="Matt Soria's Halloween ðŸŽƒ">
	<main class="container pb-3xl">
		<h1 class="uppercase text-highlight -translate-x-[0.05em] leading-none" transition:name="siteTitle">
			<span class="type-full block text-center leading-[0.5]" style="--scaler:5cqw">Matt Soria's</span>
			<span class="type-full" style="--scaler:15.7cqw;">Halloween</span>
		</h1>

		<ol class="flex flex-wrap gap-xs justify-between">
			{years.map((year) => <li><a href={'/year/' + year.slug} class="text-4xl leading-none transition-colors font-display hover:text-highlight focus-visible:text-highlight" transition:name={year.title}>{year.title}</a></li>)}
		</ol>

		{ entry.richText && (
			<div class="text-lg leading-[1.2] mt-xl max-w-prose text-balance" set:html={entry.richText}></div>
		)}

		<h2 class="text-3xl text-highlight mt-2xl leading-none mb-xl">All Time Favorites</h2>

		<div class="grid gap-xl">
			{ randomTopTen && (
				<section>
					<div class="grid md:flex md:justify-between md:items-end gap-4 pb-s">
						<h3 class="text-4xl font-display uppercase text-highlight leading-none">Movies</h3>
						<div class="flex gap-4">
							<a href="/movie-index" class="text-lg leading-none underline underline-offset-4 hover:text-highlight focus-visible:text-highlight">Movie Index</a>
							<a href="/watchlist" class="text-lg leading-none underline underline-offset-4 hover:text-highlight focus-visible:text-highlight">Watchlist</a>
						</div>
					</div>

					<ul class="grid gap-s md:grid-cols-2 xl:grid-cols-5">
						{randomTopTen.map((movie) => <MovieCard movie={movie} />)}
					</ul>
				</section>
			)}

			{ entry.musicEmbeds.length > 0 && (
				<section class="mb-2xl">
					<h2 class="font-display leading-none mb-m uppercase text-highlight text-4xl">Music</h2>
					<div class="flex gap-s">
						{ entry.musicEmbeds.map((embed) => 
							<div class="w-full mb-s lg:mb-m" set:html={embed.plainText}></div>
						)}
					</div>
				</section>
			)}
		</div>
	</main>
</BaseLayout>
---
interface Props {
	href: string;
	class: string;
  text: string;
}

const { href, class, text } = Astro.props;

let classes = 'group/link relative inline-block transition-colors duration-250 ease-out hover:text-secondary focus-visible:text-secondary';

const spookyCharacters = [
  '👻',
  '🎃',
  '🕷',
  '🕸',
  '🦇',
  '🧛‍♂️',
  '🧟‍♂️',
  '🔪'
];

function spookyChar() {
  return spookyCharacters[Math.floor(Math.random()*spookyCharacters.length)];
}

let words = text.split(' ');
let spookyText = '';
for (let w = 0; w < words.length; w++) {
  spookyText += '<span class="whitespace-nowrap">';
  
    for (let c = 0; c < words[w].length; c++) {
      if (words[w].charAt(c) === 'a' || words[w].charAt(c) === 'e' || words[w].charAt(c) === 'i' || words[w].charAt(c) === 'o' || words[w].charAt(c) === 'u' || words[w].charAt(c) === 'A' || words[w].charAt(c) === 'E' || words[w].charAt(c) === 'I' || words[w].charAt(c) === 'O' || words[w].charAt(c) === 'U') {
        spookyText += '<span class="relative"><span class="transition-opacity duration-250 ease-out group-hover/link:opacity-0 group-focus-visible/link:opacity-0">' + words[w].charAt(c) + '</span><span class="transition-opacity duration-250 ease-out opacity-0 group-hover/link:opacity-100 group-focus-visible/link:opacity-100 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 scale-[0.65]">' + spookyChar() + '</span></span>';
      } else {
        spookyText += '<span>' + words[w].charAt(c) + '</span>';
      }
    }

  spookyText += '</span>';

  if (w < words.length - 1) {
    spookyText += '<span> </span>';
  }
}
---
<a href={href} class={classes} aria-label={text}>
  <Fragment set:html={spookyText} />
</a>